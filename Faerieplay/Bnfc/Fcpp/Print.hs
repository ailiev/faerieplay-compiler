{-# OPTIONS -fno-warn-incomplete-patterns #-}
module Faerieplay.Bnfc.Fcpp.Print where

-- pretty-printer generated by the BNF converter

import Faerieplay.Bnfc.Fcpp.Abs
import Char

-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString i)
  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])



instance Print Prog where
  prt i e = case e of
   Prog id decs -> prPrec i 0 (concatD [doc (showString "program") , doc (showString "(") , prt 0 id , doc (showString ")") , doc (showString ";") , prt 0 decs])


instance Print Dec where
  prt i e = case e of
   ConstDecl id exp -> prPrec i 0 (concatD [doc (showString "const") , doc (showString "int") , prt 0 id , doc (showString "=") , prt 0 exp , doc (showString ";")])
   TypeDecl_C typ id -> prPrec i 0 (concatD [doc (showString "typedef") , prt 0 typ , prt 0 id , doc (showString ";")])
   ArrVarDecl typ id exp -> prPrec i 0 (concatD [doc (showString "var") , prt 0 typ , prt 0 id , doc (showString "[") , prt 0 exp , doc (showString "]") , doc (showString ";")])
   VarDecl typ ids -> prPrec i 0 (concatD [doc (showString "var") , prt 0 typ , prt 0 ids , doc (showString ";")])
   FunDecl typ id typednames decs stms -> prPrec i 0 (concatD [doc (showString "function") , prt 0 typ , prt 0 id , doc (showString "(") , prt 0 typednames , doc (showString ")") , doc (showString "{") , prt 0 decs , prt 0 stms , doc (showString "}")])
   TypeDecl id typ -> prPrec i 0 (concatD [doc (showString "type") , prt 0 id , doc (showString "=") , prt 0 typ , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Typ where
  prt i e = case e of
   IntT_C  -> prPrec i 0 (concatD [doc (showString "int")])
   IntTConcrete sizeexp -> prPrec i 0 (concatD [doc (showString "Integer") , doc (showString "<") , prt 0 sizeexp , doc (showString ">")])
   BoolT  -> prPrec i 0 (concatD [doc (showString "bool")])
   VoidT  -> prPrec i 0 (concatD [doc (showString "void")])
   StructT typednames -> prPrec i 0 (concatD [doc (showString "struct") , doc (showString "{") , prt 0 typednames , doc (showString "}") , doc (showString ";")])
   EnumT ids -> prPrec i 0 (concatD [doc (showString "enum") , doc (showString "{") , prt 0 ids , doc (showString "}") , doc (showString ";")])
   ArrayT typ exp -> prPrec i 0 (concatD [prt 0 typ , doc (showString "[") , prt 0 exp , doc (showString "]")])
   RefT typ -> prPrec i 0 (concatD [prt 0 typ , doc (showString "&")])
   SimpleT id -> prPrec i 0 (concatD [prt 0 id])
   IntT exp -> prPrec i 0 (concatD [doc (showString "int") , doc (showString "<") , prt 0 exp , doc (showString ">")])
   RedIntT n -> prPrec i 0 (concatD [prt 0 n])
   RedArrayT typ n -> prPrec i 0 (concatD [prt 0 typ , prt 0 n])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print TypedName where
  prt i e = case e of
   TypedName typ id -> prPrec i 0 (concatD [prt 0 typ , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Stm where
  prt i e = case e of
   SBlock decs stms -> prPrec i 0 (concatD [doc (showString "{") , prt 0 decs , prt 0 stms , doc (showString "}")])
   SAssC assstm -> prPrec i 0 (concatD [prt 0 assstm , doc (showString ";")])
   SReturn exp -> prPrec i 0 (concatD [doc (showString "return") , prt 0 exp , doc (showString ";")])
   SPrint str exps -> prPrec i 0 (concatD [doc (showString "print") , doc (showString "(") , prt 0 str , doc (showString ",") , prt 0 exps , doc (showString ")") , doc (showString ";")])
   SFor_C id exp0 exp assstm stm -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 0 id , doc (showString "=") , prt 0 exp0 , doc (showString ";") , prt 0 exp , doc (showString ";") , prt 0 assstm , doc (showString ")") , prt 0 stm])
   SFor id exp0 exp stm -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 0 id , doc (showString "=") , prt 0 exp0 , doc (showString "to") , prt 0 exp , doc (showString ")") , prt 0 stm])
   SIf exp stm -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm])
   SIfElse exp stm0 stm -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm0 , doc (showString "else") , prt 0 stm])
   SAss lval exp -> prPrec i 0 (concatD [prt 0 lval , doc (showString "=") , prt 0 exp , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print AssStm where
  prt i e = case e of
   ASOpAss lval assop exp -> prPrec i 0 (concatD [prt 0 lval , prt 0 assop , prt 0 exp])
   ASPostFix lval postfixop -> prPrec i 0 (concatD [prt 0 lval , prt 0 postfixop])
   ASPreFix postfixop lval -> prPrec i 0 (concatD [prt 0 postfixop , prt 0 lval])


instance Print AssOp where
  prt i e = case e of
   AssId  -> prPrec i 0 (concatD [doc (showString "=")])
   AssPlus  -> prPrec i 0 (concatD [doc (showString "+=")])
   AssMinus  -> prPrec i 0 (concatD [doc (showString "-=")])
   AssTimes  -> prPrec i 0 (concatD [doc (showString "*=")])
   AssDiv  -> prPrec i 0 (concatD [doc (showString "/=")])
   AssMod  -> prPrec i 0 (concatD [doc (showString "%=")])


instance Print PostFixOp where
  prt i e = case e of
   PFIncr  -> prPrec i 0 (concatD [doc (showString "++")])
   PFDecr  -> prPrec i 0 (concatD [doc (showString "--")])


instance Print LVal where
  prt i e = case e of
   LVal exp -> prPrec i 0 (concatD [prt 0 exp])
   LValT typ lval -> prPrec i 0 (concatD [doc (showString "cast") , doc (showString "<") , prt 0 typ , doc (showString ">") , doc (showString "(") , prt 0 lval , doc (showString ")")])


instance Print ConstExp where
  prt i e = case e of
   ConstExp exp -> prPrec i 0 (concatD [prt 0 exp])


instance Print Exp where
  prt i e = case e of
   EIdent id -> prPrec i 13 (concatD [prt 0 id])
   EInt n -> prPrec i 13 (concatD [prt 0 n])
   ETrue  -> prPrec i 13 (concatD [doc (showString "true")])
   EFalse  -> prPrec i 13 (concatD [doc (showString "false")])
   EArr exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "[") , prt 0 exp , doc (showString "]")])
   EStruct exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString ".") , prt 13 exp])
   EFunCall id funargs -> prPrec i 12 (concatD [prt 0 id , doc (showString "(") , prt 0 funargs , doc (showString ")")])
   ENot exp -> prPrec i 11 (concatD [doc (showString "!") , prt 12 exp])
   ENeg exp -> prPrec i 11 (concatD [doc (showString "-") , prt 12 exp])
   EBNot exp -> prPrec i 11 (concatD [doc (showString "~") , prt 12 exp])
   ETimes exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "*") , prt 11 exp])
   EDiv exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "/") , prt 11 exp])
   EMod exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "%") , prt 11 exp])
   EPlus exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "+") , prt 10 exp])
   EMinus exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "-") , prt 10 exp])
   ESL exp0 exp -> prPrec i 8 (concatD [prt 9 exp0 , doc (showString "<<") , prt 9 exp])
   ESR exp0 exp -> prPrec i 8 (concatD [prt 9 exp0 , doc (showString ">>") , prt 9 exp])
   ELt exp0 exp -> prPrec i 7 (concatD [prt 8 exp0 , doc (showString "<") , prt 8 exp])
   EGt exp0 exp -> prPrec i 7 (concatD [prt 8 exp0 , doc (showString ">") , prt 8 exp])
   ELtEq exp0 exp -> prPrec i 7 (concatD [prt 8 exp0 , doc (showString "<=") , prt 8 exp])
   EGtEq exp0 exp -> prPrec i 7 (concatD [prt 8 exp0 , doc (showString ">=") , prt 8 exp])
   EEq exp0 exp -> prPrec i 6 (concatD [prt 7 exp0 , doc (showString "==") , prt 7 exp])
   ENeq exp0 exp -> prPrec i 6 (concatD [prt 7 exp0 , doc (showString "!=") , prt 7 exp])
   EBAnd exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "&") , prt 6 exp])
   EBXor exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "^") , prt 5 exp])
   EBOr exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString "|") , prt 4 exp])
   EAnd exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "&&") , prt 3 exp])
   EOr exp0 exp -> prPrec i 1 (concatD [prt 1 exp0 , doc (showString "||") , prt 2 exp])
   ExpT typ exp -> prPrec i 0 (concatD [prt 0 typ , doc (showString "(") , prt 0 exp , doc (showString ")")])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print SizeExp where
  prt i e = case e of
   SEIdent id -> prPrec i 3 (concatD [prt 0 id])
   SEInt n -> prPrec i 3 (concatD [prt 0 n])
   SEFunCall id sizefunargs -> prPrec i 3 (concatD [prt 0 id , doc (showString "(") , prt 0 sizefunargs , doc (showString ")")])
   SETimes sizeexp0 sizeexp -> prPrec i 2 (concatD [prt 2 sizeexp0 , doc (showString "*") , prt 3 sizeexp])
   SEPlus sizeexp0 sizeexp -> prPrec i 1 (concatD [prt 1 sizeexp0 , doc (showString "+") , prt 2 sizeexp])
   SEMinus sizeexp0 sizeexp -> prPrec i 1 (concatD [prt 1 sizeexp0 , doc (showString "-") , prt 2 sizeexp])


instance Print SizeFunArg where
  prt i e = case e of
   SizeFunArg sizeexp -> prPrec i 0 (concatD [prt 0 sizeexp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print FunArg where
  prt i e = case e of
   FunArg exp -> prPrec i 0 (concatD [prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])


