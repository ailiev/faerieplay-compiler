{-# OPTIONS_GHC -fglasgow-exts #-}
-- edited by sasho's add-bnfc-derives.ed script,
-- to add Data and Typeable derivations.
module Faerieplay.Bnfc.Fcpp.Abs where
import Data.Typeable            (Typeable)
import Data.Generics            (Data)

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Data,Typeable,Read,Eq,Ord,Show)
data Prog =
   Prog Ident [Dec]
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data Dec =
   ConstDecl Ident Exp
 | TypeDecl_C Typ Ident
 | ArrVarDecl Typ Ident Exp
 | VarDecl Typ [Ident]
 | FunDecl Typ Ident [TypedName] [Dec] [Stm]
 | TypeDecl Ident Typ
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data Typ =
   IntT_C
 | IntTConcrete SizeExp
 | BoolT
 | VoidT
 | StructT [TypedName]
 | EnumT [Ident]
 | ArrayT Typ Exp
 | RefT Typ
 | SimpleT Ident
 | IntT Exp
 | RedIntT Integer
 | RedArrayT Typ Integer
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data TypedName =
   TypedName Typ Ident
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data Stm =
   SBlock [Dec] [Stm]
 | SAssC AssStm
 | SReturn Exp
 | SPrint String [Exp]
 | SFor_C Ident Exp Exp AssStm Stm
 | SFor Ident Exp Exp Stm
 | SIf Exp Stm
 | SIfElse Exp Stm Stm
 | SAss LVal Exp
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data AssStm =
   ASOpAss LVal AssOp Exp
 | ASPostFix LVal PostFixOp
 | ASPreFix PostFixOp LVal
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data AssOp =
   AssId
 | AssPlus
 | AssMinus
 | AssTimes
 | AssDiv
 | AssMod
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data PostFixOp =
   PFIncr
 | PFDecr
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data LVal =
   LVal Exp
 | LValT Typ LVal
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data ConstExp =
   ConstExp Exp
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data Exp =
   EIdent Ident
 | EInt Integer
 | ETrue
 | EFalse
 | EArr Exp Exp
 | EStruct Exp Exp
 | EFunCall Ident [FunArg]
 | ENot Exp
 | ENeg Exp
 | EBNot Exp
 | ETimes Exp Exp
 | EDiv Exp Exp
 | EMod Exp Exp
 | EPlus Exp Exp
 | EMinus Exp Exp
 | ESL Exp Exp
 | ESR Exp Exp
 | ELt Exp Exp
 | EGt Exp Exp
 | ELtEq Exp Exp
 | EGtEq Exp Exp
 | EEq Exp Exp
 | ENeq Exp Exp
 | EBAnd Exp Exp
 | EBXor Exp Exp
 | EBOr Exp Exp
 | EAnd Exp Exp
 | EOr Exp Exp
 | ExpT Typ Exp
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data SizeExp =
   SEIdent Ident
 | SEInt Integer
 | SEFunCall Ident [SizeFunArg]
 | SETimes SizeExp SizeExp
 | SEPlus SizeExp SizeExp
 | SEMinus SizeExp SizeExp
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data SizeFunArg =
   SizeFunArg SizeExp
  deriving (Data,Typeable,Read,Eq,Ord,Show)

data FunArg =
   FunArg Exp
  deriving (Data,Typeable,Read,Eq,Ord,Show)

