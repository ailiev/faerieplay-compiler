\input texinfo.tex

@c %**start of header
@setfilename sfdlc.info
@include values.texi
@include version.texi

@settitle sfdlc @value{VERSION}
@c %**end of header

@c do not break page for new chapter
@setchapternewpage off


@copying
Permission is granted ... this sofware

Permission is granted ... this manual ...

Permission is granted 

Copyright @copyright{} 2005--2008 Alexander Iliev
@end copying

@titlepage
@title sfdlc
@subtitle Documentation for version @value{VERSION}
@author Alexander Iliev
@page
@vskip 0pt plus 1fill
@insertcopying
@end titlepage

@iftex
@contents
@end iftex


@c ---  Introduction  ---

@dircategory Development
@direntry
* sfdlc: (sfdlc).                           Faerieplay circuit compiler.
@end direntry

@ifnottex
@node Top, Introduction
@top sfdlc

Sfdlc is a circuit compiler---it takes a high-level program and
produces an arithmetic circuit with some special constructs. The
circuit can be produced in a variety of formats.
@end ifnottex


@menu
* Introduction::        Getting started
* Source Languages::    Sfdlc's high-level language support.
* Circuit Programming:: Discussion on programming for an arithmetic circuit executable target.
* Invoking sfdlc::      Invocation
* File types produced:: The myriad files that sfdlc produces
* Debugging::           Debugging your high-level code.
@end menu

@node Introduction
@chapter Introduction

Sfdlc is a special-purpose compiler which translates a program written
in Secure Function Definition Language (SFDL) (a simple hybrid of C
and Pascal, introduced in the Fairplay porject) or in a subset of C++.

In this manual we focus on the operational aspects of the compiler,
and point to chapter 6 of Alex's dissertation for more extensive
commentary on topics like limitations of circuit programming, and
debugging in this environment.

@node Source Languages
@chapter Source Languages

Secure Function Definition Language (SFDL) (a simple hybrid of C
and Pascal, introduced in the Fairplay porject) or in a subset of C++.

The syntax reference for both languages, generated by the
@file{bnfc}@footnote{@indicateurl{http://www.cs.chalmers.se/~markus/BNFC/}}
parser-generator tool, is available separately (TODO: how do we refer
to them?).

@node Circuit Programming
@chapter Circuit Programming

@node Invoking sfdlc
@chapter Invoking

The basic invocation syntax is:

@example
sfdlc [ options ] file.@value{SRCEXT}.
@end example


@code{sfdlc} understands the following options:


@table @samp
       
@item -h
Print out the help text and exit.

@item -o @var{FILE}
@itemx --output=@var{file}

Write output to @var{file}.


@item -c
@itemx --compile
Compile. This is the default action.



Write output to @var{file}.


@end table


@node File types produced
@chapter File types that @command{sfdlc} produces.


@command{sfdlc} produces the following kinds of files from its various actions.

@section Executable circuit

This is the file which is given to the circuit virtual machine for execution.
Extension: @file{.runtime}.

@section Circuit graph in internal format

This is a dump of the circuit graph, before it is serialized. Extension: @file{.cct}.

@section List of gates in internal format

This is a dump of the circuit after it is serialized, but in the compiler's internal format. Extension: @file{.gates}.

@section UDrawGraph file

This is a representation of the circuit for the UDrawGraph program. Extension: @file{.udg}.

@section A circuit simulation trace

This is produced by the circuit simulation, and consists of the values generated
for each gate, in the order they occur in the serialized circuit. Extension:
@file{.run}.


@node Debugging
@chapter Debugging

Sfdlc provides several mechanisms for debugging high-level code:
@itemize @bullet
@item A circuit emulator which prints a trace of gate values during executions.
@item A print statement which produces a gate which prints several values as its result.
@item If using C++, the possibility to use another toolset for debugging.
@end itemize


@bye
