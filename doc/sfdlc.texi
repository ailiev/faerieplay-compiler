\input texinfo 

@c %**start of header
@setfilename sfdlc.info
@include values.texi
@include version.texi

@settitle sfdlc @value{VERSION}
@c %**end of header

@c do not break page for new chapter
@setchapternewpage off


@macro termin {text}
@emph{\text\}
@end macro


@copying
Permission is granted ... this sofware

Permission is granted ... this manual ...

Permission is granted 

Copyright @copyright{} 2005--2008 Alexander Iliev
@end copying

@titlepage
@title sfdlc
@subtitle Documentation for version @value{VERSION}
@author Alexander Iliev
@page
@vskip 0pt plus 1fill
@insertcopying
@end titlepage

@iftex
@contents
@end iftex


@c ---  Introduction  ---

@dircategory Development
@direntry
* sfdlc: (sfdlc).                           Faerieplay circuit compiler.
@end direntry

@ifnottex
@node Top, Introduction
@top sfdlc

@sfdlc{} is a circuit compiler---it takes a high-level program and
produces an arithmetic circuit with some special constructs. The
circuit can be produced in a variety of formats.
@end ifnottex


@menu
* Introduction::        Getting started
* Source Languages::    @sfdlc{} high-level languages.
* Prerequisites::       What you need installed to use @sfdlc{}.
* Invoking sfdlc::      Invocation
* File types produced:: The myriad files that @sfdlc{} produces
* Debugging::           Debugging your high-level code.
@end menu

@node Introduction
@chapter Introduction

@sfdlc{} is a special-purpose compiler which translates a program written
in a high-level imperative language into an arithmetic circuit with some extensions.

It currently supports two high-level languages
@itemize @bullet
@item Secure Function Definition Language (SFDL), which is a simple hybrid of C and
Pascal, introduced in the Fairplay porject), and
@item a subset of C++, which we call FC++.
@end itemize

The target arithmetic circuit has some extended gates for handling
indirect arrays efficiently.

The circuit is intended to be executed on the Faerieplay Circuit
Virtual Machine (CVM), whose main goal is to execute arbitrary programs
securely, in the sense that an adversary located outside a specified
trusted area, where the circuit evaluator runs, is not able to learn
anything about the program execution. In particular, the trusted area
is a @termin{Secure Coprocessor}, which is secure even against a local
adversary who tries to attack it physically. We have used the IBM 4758
secure coprocessor.

In this manual we focus on the operational aspects of the compiler,
and point to chapters 9 and 10 of Alex's dissertation for more extensive
commentary on topics like limitations of circuit programming, and
debugging in this environment.

@node Source Languages
@chapter Source Languages

The Faerieplay compiler supports Secure Function Definition Language
(SFDL) (a simple hybrid of C and Pascal, introduced in the Fairplay
porject) and a subset of C++, which we call FC++.


@section SFDL

@subsection Syntax
The syntax reference documents for the languages, generated by the
@file{bnfc}@footnote{@uref{http://www.cs.chalmers.se/~markus/BNFC/}}
parser-generator tool, are available in the files
@file{Faerieplay/Bnfc/Sfdl/@value{SyntaxFile}} and @file{Faerieplay/Bnfc/Fcpp/@value{SyntaxFile}}, after @command{make} has been run.

Example files for the two languages are available in the @file{tests/}
directory.

@subsection Language rules
The entry point to an SFDL program is a specific function---@command{sfdlmain}.
Parameters and return values of @command{sfdlmain} are the inputs and outputs
of the computation respectively. The type signature of @command{sfdlmain} is
not fixed but reflects the types of the program inputs.

@subsection Type rules
SFDL is strongly typed. Each expression and variable has a type. Variable types
must be provided when the variable is declared--in this SFDL is similar to typed
languages without type inference, like C and Java.

The LHS and RHS of an assignment must be of compatible
types. The type agreement rules
for formal and actual parameters of a function are the same as for an assignment
of the actual value to the formal parameter variable.

SFDL does not provide explicit type casting.

@subsection Semantics

SFDL semantics will not be surprising to programmers of imperative languages for
RAM machines.

@subsubsection Variables
A variable is the name of a value. This value can change over time, as the
variable is assigned to. In Faerieplay SFDL, a variable can take the form of a
simple name, or a structure, or an array. A field in a structure is also a
variable, as is an array element.

@subsubsection Program state
Like any imperative program, an SFDL program, and some of the elements of that
program, can be seen as state transformers. The program state consists of a set
of variable bindings. At the start of program executions, the input variables
and any variables assigned to constant values comprise the state. At the end of
execution, all variables will have a value, including the variables which
represent the program's output. The program state is modified by assignment
operations.

@subsubsection Assignment
An assignment changes the value bound to a variable. The value of the variable
after the assignment becomes the same as the value of the RHS
of the assignment. Clearly, the value of a variable can only be considered at a
particular point during program execution.

@subsubsection Lexical scoping
In SFDL, lexical scopes are created by blocks, enclosed in parentheses. A
variable name may be re-used in a nested scope, in which case standard lexical
scoping rules apply: references and assignments to a name refer to the
variable of that name declared in the scope closest to the use.

@subsubsection Conditionals
Variable updates in a conditional branch whose condition is false are discarded.
The affected variables continue with the values which they had before the
conditional block.

@subsubsection Loops
Loops in Faerieplay are unrolled before execution, and thus the semantics of a
loop is the same as the sequence of unrolled statements. The loop counter start
value can be smaller or larger than the end value---this determines whether the
counter counts up or down.

@subsubsection Function calls
A function call is treated as a macro. An expanded function call creates a new
lexical scope for its formal parameters, as well as any variables declared in
it. The default parameter treatment is @emph{pass by value}. Functions with only
value parameters can only have an effect if their result is assigned to a
variable.

SFDL also supports reference parameters. Each
reference formal parameter functions as an alias for the actual parameter
passed for it, and thus any assignments to the formal parameter inside the
function update the actual parameter.

@subsection Miscellaneous

@itemize @bullet
@item Variables, including array elements, are implicitly initialized with zero-values.

@item Values are returned from a function as in Pascal, by assigning to a
(implicitly declared) variable of the same name and type as the function. It is
an error to actually declare such a variable in the function.

@item Functions cannot be called before they are defined. This is one of the reasons that recursive or mutually recursive functions are not currently supported.

@item Since important constructs like loop limits must be constant expressions, it is important to know what a constant expression is. Currently the compiler recoognizes the following as constant:
@itemize @minus
@item A literal,
@item A defined constant,
@item An expression involving only constant expressions.
@end itemize
Currently the compiler does not recognize constant functions---there cannot be function calls in a constant expression.


@end itemize



@section FC++

@sfdlc{} supports a subset of C++, which we call FC++, in order to allow a user to use existing C++ development toolchains for tasks like debugging, while using @sfdlc{} and the Faerieplay CVM for secure execution.

@subsection Which subset of C++?

Here are the restrictions of FC++ with respect to standard C++.

@itemize @bullet
@item No pointer syntax or usage.

@item No templates, except for the FC++ built-in array and Integer types.

@item None of the standard headers are supported---it is unlikely that any existing C++ headers will work with FC++.

@item @code{const} can only appear in front of integer declations.

@item No general templates.

@item Array syntax is limited to the syntax of the @file{boost} C++ library:
      An N-element array of T's has type @code{array<T, N>},
where @var{N} must be a compile-time constant expression.
Standard C/C++ array syntax is not supported. Multi-dimentional arrays
are specified as in boost: @code{array<array<T,N1>, N2>}.

@end itemize

@subsection Additional syntax requirements

FC++ has a slightly different syntax than C++, in order to ease
parsing. A few simple The differences are:
@itemize @bullet
@item
Variable declarations are preceded by the keyword @code{var}.

@item
Function declarations are preceded by the keyword @code{function}.

@item
The whole program must be preceded by a line:

@code{program <name>;}

@end itemize

Every FC++ file should invoke @code{#include <sfdl-crutches.h>},
which will pull in any preprocessor definitions needed to have FC++
code compiled by a regular C++ compiler.


@node Prerequisites
@chapter Prerequisites

@section Runtime prerequisites

@itemize @bullet

@item @command{uDrawGraph}, from @uref{http://www.informatik.uni-bremen.de/uDrawGraph/en/uDrawGraph/}. This is optional, but useful to visualize the circuits produced.

@end itemize


@section Build prerequisites

Building @sfdlc{} requires the following libraries and toolkits.

@itemize @bullet

@item @file{bnfc}
parser generator from @uref{http://www.cs.chalmers.se/~markus/BNFC/}.
The current build needs version 2.3b or later. Version 2.3b has more
flexible support than 2.2 for placing the bnfc artifacts (lexer and
parser files, as well as tartet language code).

@item @command{ghc} version 6.4 or 6.6 to compile @sfdlc{}. Later versions may work, but
major @command{ghc} revisions may not be source-compatible with older
versions. @sfdlc{} also needs several Haskell packages which are not in the base library:
@itemize @minus
@item The functional graph library (fgl) (package @file{Data.Graph.Inductive})
@item The monad template library (mtl)
@item The ``ditch your boilerplate'' generic programming library (package @file{Data.Generics}).
@end itemize
All these libraries should be available with @command{ghc}. Sometimes they are packaged separately, eg. Debian package @file{libghc6-fgl-dev}.

@end itemize



@section Boost array library

FC++ represents arrays as the Boost array class
@footnote{@uref{http://www.boost.org/doc/html/array.html}}.
Thus, the Boost array library needs to be available in order to
compile FC++ code with a C++ compiler.


@node Invoking sfdlc
@chapter Invoking

The basic invocation syntax is:

@example
sfdlc [ actions and options ] file.@value{SRCEXT}
@end example


@sfdlc{} understands the following actions and options. Please see @ref{File
types produced} for file extensions associated with different input
and output files.


@section Actions

@table @samp

@item -c
@itemx --compile
Compile. This is the default action. Produces a @file{.runtime} file which can be run by the CVM.

@item -G
@itemx --mkgraph
Generate a @command{uDrawGraph} file. This action must be run on a circuit dump
(@file{.cct}). Note that @command{uDrawGraph} cannot open large graph files. This can be
worked around by first selecting a subset of the circuit graph with the
@option{--prune} action.

@itemx --prune=@var{center},@var{len}
Read a @file{.cct} graph file, and output only those nodes (gates) which are
within a distance of @var{len} of gate number @var{center}. Useful to get a
local snapshot of circuit, small enough to be loaded by @command{uDrawGraph}.


@item -r
@itemx --run
Run the circuit simulator on a gates dump (@file{.gates} file).


@item -V
@itemx --version
Print out the version number.

@item -h
@itemx --help
Print out the help text and exit.

@end table


@section Options

@table @samp


@item -o @var{file}
@itemx --output=@var{file}
Write output to @var{file}.

@item --dgt
@itemx --dump-gates
In addition to compiling, dump the list of gates, in topological order, to a @file{.gates} file.

@item --dgr
@itemx --dump-graph
In addition to compiling, dump the circuit to a @file{.cct} file.

@item -p
@itemx --gen-print
Generate @code{print} gates, from @code{print} statements in
the source. If not provided, @code{print} statements are ignored.

@item -v
@itemx --verbose
Print more information during compilation.

@item --bindump
For the circuit simulator (invoked with @option{--run}). Produce a trace of
the binary gate values, so that it can be compared with the same trace
produced by the Circuit VM.


@end table


@node File types produced
@chapter File types that @sfdlc{} produces.

@sfdlc{} produces the following kinds of files, with the specified name
extensions, from its various actions.

@table @asis

@item Executable circuit
@itemx @file{.runtime}
This is the file which is given to the circuit virtual machine (CVM) for
execution.

@item Circuit dump
@itemx @file{.cct}
This is a dump of the circuit in an internal format. @sfdlc{} can read
this format as well as write it, and thus use it for other actions,
like simulating the circuit.

@item List of gates in internal format
@itemx @file{.gates}
This is a dump of the circuit gates in topological order, in the
compiler's internal format.

@item @command{uDrawGraph} file
@itemx @file{.udg}
This is a representation of the circuit for the @command{uDrawGraph} program.


@item A circuit simulation trace
@itemx @file{.run}
This is produced by the circuit simulation, and consists of the values generated
for each gate, in the order they occur in the serialized circuit.

@end table


@node Debugging
@chapter Debugging

@sfdlc{} Provides several mechanisms for debugging high-level code:
@itemize @bullet
@item A circuit emulator which prints a trace of gate values during executions.
@item A print statement which produces a gate which prints several values as its result.
@item If using C++, the possibility to use another toolset for debugging.
@end itemize


@bye
