Analysis of what is static and what not:

Could check all expressions which should be static (eg. consts, int size, array
length) during first typecheck phase. but this is nasty to mix with actual
typechecking.

Perhaps have a second pass right away, which actually computes all available
static expressions? 

All consts should be available before unrolling? yes!

how to deal with structs?? name + offset? a set of separate names?



Sun Jun  5 17:37:53 2005

Current implementation of HoistStms will not handle a function call in an
l-value. this seems fairly sensible to prohibit.


Mon Jun 13 20:16:32 2005

notes on Graph:

type Adj b = [(b, Node)]
Labeled links to or from a Node.

type Context a b = (Adj b, Node, a, Adj b)
Links to the Node, the Node itself, a label, links from the Node.

> a is the type of vertex labels, and b is the type of edge labels



Thu Jun 16 23:52:00 2005

recursive types are causing a hassle with the circuit generator var table being
keyed on Var. We can only keep the gate locations of Var. but what about:
struct Point = { int x, int y }
struct Shoes = { int number, bool torn, Color col }
struct Globals = { Point center, Shoes shoes, int age }
// ...
var Globals g;
var Point p1;
// ...
g.center = p1;
g.center.x = 0;


POINT: var tables should be keyed on +/- what appears as an lval:
EVar
EStruct
EArr
or (stripped down) Exp in general?


g = ...
// ...

if () {
   var Globals g;
   // ...
   g.center.x = 0;
}


Sun Jun 19 13:26:41 2005

Graph library bug:
error message in Tree.hs line 72 is really uninformative



Thu Jun 23 13:34:10 2005

DISCOVERY: array writes have to update the array variable/pointer too. not the
case with "normal" array reads, but the oblivious read alg. updates the array
values (in particular the working area in sqrt alg.), so any subsequent reads
and writes should use the new one.


Thu Oct 20 15:27:29 2005

Where/how do we carry the line numbers??
- all tokens
- keywords?


Mon Dec 12 11:32:31 2005

installing Hat tracer:
- needed to tell hmake about the ghc compiler:
  $ hmake-config new
  $ hmake-config add ghc
  (it figured out where ghc 6.4 is)


installed Buddha debugger in ~/minime/buddha. no further progress on it yet.



<date>Fri Mar 31 16:20:12 2006</date>

Adding print gates: they have nothing coming out of them, so need to take care
that when the circuit is trimmed, they are not thrown out, as the output gates
are not reachable from them. Ie. print gates are an "anchor" of sorts too, and
all gates with a path to a print gate (as well as to an output gate) should be
kept.


<date>Thu May 11 11:51:22 2006</date>


How should a Select gate treat a Nothing condition? Seems correct to treat it
same as False, rather than just produce a Nothing. A Nothing condition should
only be produced on a non-taken branch, in which case that branch's values
should be discarded *and* the peer branch's values (perhaps unchanged) taken.


<date>Thu Jun  8 19:48:54 2006</date>

Graph.ufold does the fold in an arbitrary-looking order, certainly not
depth-first.


<date>Mon Sep 18 10:51:37 2006</date>

Compilation run on eisenhower (4 * Dual Core AMD Opteron(tm) Processor 265 at
1.8 GHz, 4GB RAM):

with LOGN=7:
- 102 mins.
- used only one of the CPUs, at 100%.
- 1.1GB RAM most of the time, up to 1.2GB in last 2 mins.

*** this sounds incorrect, it was probably N=6

<date>Tue Sep 26 18:44:13 2006</date>

After a lot of work, the Lit-reduction code seems to work.

some profiling resulted in a few optimizations, most importantly in
CircGen.keepNodes, and then some observations:

$ sfdlc +RTS -p -K128M -RTS --dump-graph --dump-gates -c dijkstra.sfdl -o \
dijkstra.runtime

- genCircuitM is not even the most expensive - 21.1% time; inside it:
  - genExpWithDoc: 11%
  - updateLabel: 6.6%
- clip_circuit is expensive - 23.4%. Inside it:
  - grev is worst - 11.5%
  - then gsel - 5.7%
  - then bfsn - 4.3%
- doExtra total: 10.9%
- unroll: 6.9%

- rest of the main ones:
COST CENTRE                    MODULE               %time %alloc

collapse_lit_gates             CircGen               15.1   18.6
grev                           CircGen               11.5    8.8
renumber                       CircGen                6.6    7.0
flatten_circuit                CircGen                6.2    9.1
gsel                           CircGen                5.7    5.6
doExtra                        Main                   5.2   10.2
showGraph                      GraphLib               4.8    8.4
updateLabel                    CircGen                4.8    2.6
bfsn                           CircGen                4.3    3.0
#extract                       CircGen                3.9    3.3
doExtras                       Main                   3.4    0.0



<date>Wed Sep 27 12:59:26 2006</date>

A compilation run on eisenhower with LOGN=7 and MEAN_D=8:
- 350 mins
- 1810MB RAM

<date>Wed Sep 27 17:53:36 2006</date>

When running with LOGN=8 on 32 bit machine:
out of memory (requested 1048576 bytes)
when top reported resource usage of:


<date>Thu Sep 28 15:01:39 2006</date>


Heap profiling, on LOGN=4 MEAN_D=5:

Some milestones:
- genCircuitM peaks at about 9 s
- collapse_lit_gates starts at 10s, till 29s or so, though actually finishes
earlier; 3.5M+ max, 60.2M total.
- clip_circuit: 18-28s, clears out well; max about 3M, total 21M
- renumber: 30s-end (; max 3M+, total 15.3M

*** biographical
** drag/void
- collapse_lit_gates has some, max 500K in the 12-37s range, and a burst at 40s


<date>Sat Sep 30 19:12:51 2006</date>

A compilation run on eisenhower with LOGN=8, MEAN_D=10:
- 171 mins
- 2550 RAM
- write_circuit failed due to disk quota, so do not have dijkstra.cct



<date>Fri Oct 13 16:07:31 2006</date>

Where to check location updates for array possibility:
lines:
- 516
- 530
- 675
- 898
- 724
- 755
- 1338



<date>Mon Oct 30 13:19:19 2006</date>

About lexical scope management:
- variables are lexically scoped as usual.

- implemented in Unroll.unroll(SBlock), where all local vars inside the scope
(ie. vars declared inside the scope, and thus found in the SBlock's VarSet) are
annotated with that scope's location. Since the innermost scope annotation is
done last, a variable reference (LHS or RHS of an assignment) ends up annotated
with the innermost/deepest scope where it is defined. Hence, the standard
lexical scoping semantics.


<date>Sat Nov  4 17:38:31 2006</date>

RESOURCE USAGE:
LOGN=4; D=5:


<date>Wed Nov 22 15:59:02 2006</date>

sfdlc: divide by zero

brilliant!
