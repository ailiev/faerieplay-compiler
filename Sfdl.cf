-- -*- haskell -*-
--
-- Circuit compiler for the Faerieplay hardware-assisted secure
-- computation project at Dartmouth College.
--
-- Copyright (C) 2003-2007, Alexander Iliev <sasho@cs.dartmouth.edu> and
-- Sean W. Smith <sws@cs.dartmouth.edu>
--
-- All rights reserved.
--
-- This code is released under a BSD license.
-- Please see LICENSE.txt for the full license and disclaimers.
--

-- Grammar for Faerieplay secure function definition langugae (sfdl). Similar to but
-- extended from the original Fairplay SFDL.


-- NOTES:
--
-- There is 1 shift-reduce conflict due to the classical
-- ambiguous if () {} else {}
-- putting a "fi" at the end of an if statement solves those, but
-- breaks current SFDL syntax.

---------------


-- tokens with position information
-- position token PIdent (letter (letter|digit|'_'|'\'')*) ;

-----------
-- ordinary rules
-----------

-- program
Prog.           Prog    ::= "program" Ident "{" [Dec] "}" ;

-- how are lists of Dec treated
-- not all declarations need a ; terminator, so mention it in the actual definition if
-- needed.
terminator Dec "" ;

-- only an Assignment statement needs a ";" terminator, so specify
-- that only there
terminator Stm "" ;


-- this is needed for Ident lists in enum types and var declarations.
separator nonempty Ident "," ;


-- declarations
ConstDecl.      Dec     ::= "const" Ident "=" Exp ";" ;
TypeDecl.       Dec     ::= "type"  Ident "=" Typ ";" ;
-- TypeDecl.       Dec     ::= "typedef"  Typ Ident ;
VarDecl.        Dec     ::= "var"   Typ [Ident] ";" ;
-- FunDecl is not semicolon-terminated
FunDecl.        Dec     ::= "function" Typ Ident "(" [TypedName] ")"
                            "{" [Dec] [Stm] "}" ;

TypedFunDecl.   Dec     ::= "function" Typ Ident "(" [TypedName] ")" ":" Typ
                            "{" [Dec] [Stm] "}" ;

-----------
-- types
-----------

-- NOTE: semantically, the size Exp for Int and arrays has to be a compile-time integer
-- constant. TODO: May be better to define another subset of Exp for this purpose, ie. Int
-- size and array length.

-- this will be the data value produced by the parser...
IntTConcrete.    Typ      ::= "Int" "<" SizeExp ">" ;
-- and we will fix it up to:
internal IntT.  Typ     ::= "Int" "<" Exp ">" ;

-- generic int, without a specified size. can only be used in a
-- function signature I believe
GenIntT.        Typ     ::= "Int" "<`>" ;
-- other possible solutions to the IntT definition problem:
--IntT.          Typ         ::= "Int" "<" Exp ">" ;
--IntT.          Typ         ::= "Int" "<" Integer ">" ;

BoolT.          Typ     ::= "Boolean" ;
VoidT.          Typ     ::= "void" ;

StructT.        Typ     ::= "struct" "{" [TypedName] "}" ;
EnumT.          Typ     ::= "enum" "{" [Ident] "}" ;
ArrayT.         Typ     ::= Typ "[" Exp "]" ;
RefT.           Typ     ::= Typ "&" ;
SimpleT.        Typ     ::= Ident ;

-- this is a declaration of a named typed variable, like in a function
-- param list, or struct field
TypedName.             TypedName         ::= Typ Ident ;

-- fields in a struct are separated by commas
-- a void type can be defined as an empty struct. (TODO: or should the
-- compiler define one?)
-- both the above requirements apply to function arg lists too
-- separator TypedName "," ;
-- [].             [TypedName]   ::= ;
-- (:).            [TypedName]   ::= TypedName "," [TypedName] ;
separator TypedName "," ;


-- statements

-- a block statement is a "{", followed by a list of Declarations, followed by a
-- list of Statements, and closed by a "}".
SBlock.     Stm     ::= "{" [Dec] [Stm] "}" ;

-- assignment
SAss.       Stm     ::= LVal "=" Exp ";" ;

-- and for debugging:
-- the String in there is meant to be a fixed string
SPrint.     Stm     ::= "print" "(" String "," [Exp] ")" ;
separator Exp "," ;

-- none of these statements need a trailing semicolon. so, only
-- Assignment needs it (as specified above). NOTE: most likely the Stm's contained in the
-- following generations are SBlock's.
SFor.       Stm     ::= "for" "(" Ident "=" Exp "to" Exp ")" Stm ;
SIf.        Stm     ::= "if" "(" Exp ")" Stm ;
SIfElse.    Stm     ::= "if" "(" Exp ")" Stm "else" Stm ;

-- to allow extra semicolons; no effect on the AST
-- causes 3 shift-reduce conflicts
_.        Stm      ::= Stm ";" ;


LVal.           LVal    ::= Exp ;
-- for type annotation
internal LValT. LVal    ::= "cast" "<" Typ ">" "(" LVal ")" ; 


--------------
-- expressions
--------------

EIdent.   Exp13     ::= Ident ;
EInt.     Exp13     ::= Integer ;
-- EString.  Exp13     ::= String ;
ETrue.          Exp13    ::= "true" ;
EFalse.         Exp13    ::= "false" ;


EArr.           Exp12   ::= Exp12 "[" Exp "]" ;
EStruct.        Exp12   ::= Exp12 "." Exp13 ;

-- this causes some shift-reduce conflicts
EFunCall.       Exp12   ::= Ident "(" [FunArg] ")" ;

-- binary operators, grouped by precedence, numbered as in the C
-- operator precedence man page
ENot.           Exp11   ::= "!" Exp12 ;
-- this appears to cause a bunch of shift-reduce conflicts
ENeg.           Exp11   ::= "-" Exp12 ;
EBNot.          Exp11   ::= "~" Exp12 ;

ETimes.         Exp10   ::= Exp10 "*" Exp11 ;
EDiv.           Exp10   ::= Exp10 "/" Exp11 ;
EMod.           Exp10   ::= Exp10 "%" Exp11 ;

EPlus.          Exp9    ::= Exp9 "+" Exp10 ;
EMinus.         Exp9    ::= Exp9 "-" Exp10 ;

ESL.            Exp8    ::= Exp9 "<<" Exp9 ;
ESR.            Exp8    ::= Exp9 ">>" Exp9 ;

ELt.            Exp7    ::= Exp8 "<" Exp8 ;
EGt.            Exp7    ::= Exp8 ">" Exp8 ;
ELtEq.          Exp7    ::= Exp8 "<=" Exp8 ;
EGtEq.          Exp7    ::= Exp8 ">=" Exp8 ;

EEq.            Exp6    ::= Exp7 "==" Exp7 ;
ENeq.           Exp6    ::= Exp7 "!=" Exp7 ;

EBAnd.          Exp5    ::= Exp5 "&" Exp6 ;
EBXor.          Exp4    ::= Exp4 "^" Exp5 ;
EBOr.           Exp3    ::= Exp3 "|" Exp4 ;

EAnd.           Exp2    ::= Exp2 "&&" Exp3 ;
EOr.            Exp1    ::= Exp1 "||" Exp2 ;

coercions Exp 13 ;


--
-- "size expressions" - much more limited than full expressions.
--

SEIdent.        SizeExp3     ::= Ident ;
SEInt.          SizeExp3     ::= Integer ;


-- may want to support functions like log() for these
SEFunCall.      SizeExp3     ::= Ident "(" [SizeFunArg] ")" ;

SETimes.        SizeExp2     ::= SizeExp2 "*" SizeExp3 ;

SEPlus.         SizeExp1     ::= SizeExp1 "+" SizeExp2 ;
SEMinus.        SizeExp1     ::= SizeExp1 "-" SizeExp2 ;

coercions SizeExp 3 ;


-- a coercion expression! right now only for the bitsize of Int values.
internal ECoerce.       Exp     ::= Integer Exp ;


-- a bit-access expression          int       bit index
internal EGetBit.       Exp     ::= Exp  "["    Exp  "]";



-- function call arguments.
-- only have this as a separate type so we can define a list separator for it.
-- this causes some shift-reduce conflicts
FunArg.         FunArg  ::= Exp ;
separator FunArg "," ;

-- function call args for a size expression
SizeFunArg.     SizeFunArg      ::= SizeExp ;
separator SizeFunArg "," ;



-- pragmas

-- type annotated expression. this node will only be added by the
-- typechecker, but the pretty-printer will print it following this
-- syntax
internal ExpT. Exp ::= Typ "(" Exp ")" ;

-- a Type constructor for a function type (which is not syntactically declared,
-- nor added to the AST), to hold a function's type in the TypeTable
--                          return type    param types
internal FuncT. Typ     ::= Typ            [Typ] ;

-------
-- "reduced" types, which are described by simpler types than the originals
-------
-- IntT with just an interger size, not an Exp
internal RedIntT.       Typ     ::= Integer ;
-- ArrayT with an interger size
internal RedArrayT.     Typ     ::= Typ Integer ;
-- a reduced EnumT?


-- these should really be internal, as they are not used by the concrete syntax,
-- but internally by FuncT the typechecker. BNFC does not do internal list defs
-- though
-- results in 2 unused rules by Happy
[].    [Typ]   ::= ;
(:).   [Typ]   ::= Typ [Typ] ;


comment "/*" "*/" ;
comment "//" ;

-- Typ is an entry point just for debugging
entrypoints Prog, Stm, Exp ;
